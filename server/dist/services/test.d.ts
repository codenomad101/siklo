import { type NewTestTemplate, type NewUserTestResponse } from '../db/schema';
export declare class TestService {
    getAllTestTemplates(examId?: string): Promise<{
        isActive: boolean | null;
        createdAt: Date;
        examId: string;
        totalMarks: string;
        durationMinutes: number;
        totalQuestions: number;
        templateId: string;
        templateName: string;
        testType: "full_length" | "sectional" | "topic_wise" | "previous_year" | "daily_practice" | null;
        isFree: boolean | null;
        price: string | null;
        instructions: string | null;
        syllabusCoverage: string | null;
    }[]>;
    getTestTemplateById(templateId: string): Promise<{
        isActive: boolean | null;
        createdAt: Date;
        examId: string;
        totalMarks: string;
        durationMinutes: number;
        totalQuestions: number;
        templateId: string;
        templateName: string;
        testType: "full_length" | "sectional" | "topic_wise" | "previous_year" | "daily_practice" | null;
        isFree: boolean | null;
        price: string | null;
        instructions: string | null;
        syllabusCoverage: string | null;
    }>;
    createTestTemplate(templateData: NewTestTemplate): Promise<{
        isActive: boolean | null;
        createdAt: Date;
        examId: string;
        totalMarks: string;
        durationMinutes: number;
        totalQuestions: number;
        templateId: string;
        templateName: string;
        testType: "full_length" | "sectional" | "topic_wise" | "previous_year" | "daily_practice" | null;
        isFree: boolean | null;
        price: string | null;
        instructions: string | null;
        syllabusCoverage: string | null;
    }>;
    updateTestTemplate(templateId: string, updateData: Partial<NewTestTemplate>): Promise<{
        isActive: boolean | null;
        createdAt: Date;
        examId: string;
        totalMarks: string;
        durationMinutes: number;
        totalQuestions: number;
        templateId: string;
        templateName: string;
        testType: "full_length" | "sectional" | "topic_wise" | "previous_year" | "daily_practice" | null;
        isFree: boolean | null;
        price: string | null;
        instructions: string | null;
        syllabusCoverage: string | null;
    }>;
    deleteTestTemplate(templateId: string): Promise<void>;
    createUserTest(userId: string, templateId: string): Promise<{
        userId: string;
        createdAt: Date;
        totalMarks: string | null;
        templateId: string;
        userTestId: string;
        testStatus: "not_started" | "in_progress" | "completed" | "abandoned" | null;
        startedAt: Date | null;
        completedAt: Date | null;
        timeTakenSeconds: number | null;
        totalQuestionsAttempted: number | null;
        correctAnswers: number | null;
        incorrectAnswers: number | null;
        skippedQuestions: number | null;
        marksObtained: string | null;
        percentage: string | null;
        rank: number | null;
        totalParticipants: number | null;
        percentile: string | null;
    }>;
    getUserTests(userId: string, status?: string): Promise<{
        userId: string;
        createdAt: Date;
        totalMarks: string | null;
        templateId: string;
        userTestId: string;
        testStatus: "not_started" | "in_progress" | "completed" | "abandoned" | null;
        startedAt: Date | null;
        completedAt: Date | null;
        timeTakenSeconds: number | null;
        totalQuestionsAttempted: number | null;
        correctAnswers: number | null;
        incorrectAnswers: number | null;
        skippedQuestions: number | null;
        marksObtained: string | null;
        percentage: string | null;
        rank: number | null;
        totalParticipants: number | null;
        percentile: string | null;
    }[]>;
    getUserTestById(userTestId: string): Promise<{
        userId: string;
        createdAt: Date;
        totalMarks: string | null;
        templateId: string;
        userTestId: string;
        testStatus: "not_started" | "in_progress" | "completed" | "abandoned" | null;
        startedAt: Date | null;
        completedAt: Date | null;
        timeTakenSeconds: number | null;
        totalQuestionsAttempted: number | null;
        correctAnswers: number | null;
        incorrectAnswers: number | null;
        skippedQuestions: number | null;
        marksObtained: string | null;
        percentage: string | null;
        rank: number | null;
        totalParticipants: number | null;
        percentile: string | null;
    }>;
    startUserTest(userTestId: string): Promise<{
        userId: string;
        createdAt: Date;
        totalMarks: string | null;
        templateId: string;
        userTestId: string;
        testStatus: "not_started" | "in_progress" | "completed" | "abandoned" | null;
        startedAt: Date | null;
        completedAt: Date | null;
        timeTakenSeconds: number | null;
        totalQuestionsAttempted: number | null;
        correctAnswers: number | null;
        incorrectAnswers: number | null;
        skippedQuestions: number | null;
        marksObtained: string | null;
        percentage: string | null;
        rank: number | null;
        totalParticipants: number | null;
        percentile: string | null;
    }>;
    completeUserTest(userTestId: string, testData: {
        timeTakenSeconds: number;
        totalQuestionsAttempted: number;
        correctAnswers: number;
        incorrectAnswers: number;
        skippedQuestions: number;
        marksObtained: number;
        percentage: number;
        rank?: number;
        totalParticipants?: number;
        percentile?: number;
    }): Promise<{
        userId: string;
        createdAt: Date;
        totalMarks: string | null;
        templateId: string;
        userTestId: string;
        testStatus: "not_started" | "in_progress" | "completed" | "abandoned" | null;
        startedAt: Date | null;
        completedAt: Date | null;
        timeTakenSeconds: number | null;
        totalQuestionsAttempted: number | null;
        correctAnswers: number | null;
        incorrectAnswers: number | null;
        skippedQuestions: number | null;
        marksObtained: string | null;
        percentage: string | null;
        rank: number | null;
        totalParticipants: number | null;
        percentile: string | null;
    }>;
    abandonUserTest(userTestId: string): Promise<{
        userId: string;
        createdAt: Date;
        totalMarks: string | null;
        templateId: string;
        userTestId: string;
        testStatus: "not_started" | "in_progress" | "completed" | "abandoned" | null;
        startedAt: Date | null;
        completedAt: Date | null;
        timeTakenSeconds: number | null;
        totalQuestionsAttempted: number | null;
        correctAnswers: number | null;
        incorrectAnswers: number | null;
        skippedQuestions: number | null;
        marksObtained: string | null;
        percentage: string | null;
        rank: number | null;
        totalParticipants: number | null;
        percentile: string | null;
    }>;
    submitTestResponse(responseData: NewUserTestResponse): Promise<any>;
    getUserTestResponses(userTestId: string): Promise<{
        [x: string]: any;
    }[]>;
    updateTestResponse(responseId: string, updateData: {
        userAnswer?: string;
        isCorrect?: boolean;
        timeTakenSeconds?: number;
        isMarkedForReview?: boolean;
        marksObtained?: number;
    }): Promise<any>;
    generateTestQuestions(templateId: string, examId: string, subjectIds?: string[]): Promise<{
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        examId: string;
        subjectId: string;
        topicId: string;
        difficultyLevel: "easy" | "medium" | "hard" | null;
        questionId: string;
        questionText: string;
        questionImageUrl: string | null;
        questionType: "mcq" | "numerical" | "true_false" | "fill_blank" | null;
        marks: string | null;
        negativeMarks: string | null;
        optionA: string | null;
        optionB: string | null;
        optionC: string | null;
        optionD: string | null;
        optionE: string | null;
        correctAnswer: string;
        detailedSolution: string | null;
        solutionVideoUrl: string | null;
        hint: string | null;
        yearAppeared: number | null;
        source: string | null;
        timesAttempted: number | null;
        timesCorrect: number | null;
        averageTimeSeconds: number | null;
        language: string | null;
        createdBy: string | null;
    }[]>;
    getUserTestAnalytics(userId: string, days?: number): Promise<{
        totalTests: number;
        completedTests: number;
        averageScore: number;
        averageTime: number;
        bestScore: number;
        worstScore: number;
        completionRate: number;
    }>;
    getTestLeaderboard(templateId: string, limit?: number): Promise<{
        userId: string;
        createdAt: Date;
        totalMarks: string | null;
        templateId: string;
        userTestId: string;
        testStatus: "not_started" | "in_progress" | "completed" | "abandoned" | null;
        startedAt: Date | null;
        completedAt: Date | null;
        timeTakenSeconds: number | null;
        totalQuestionsAttempted: number | null;
        correctAnswers: number | null;
        incorrectAnswers: number | null;
        skippedQuestions: number | null;
        marksObtained: string | null;
        percentage: string | null;
        rank: number | null;
        totalParticipants: number | null;
        percentile: string | null;
    }[]>;
    getUserRankInTest(userTestId: string): Promise<{
        rank: number;
        totalParticipants: number;
        percentile: number;
    } | null>;
}
//# sourceMappingURL=test.d.ts.map