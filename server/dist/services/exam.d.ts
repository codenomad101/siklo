import { type NewExam, type NewSubject, type NewTopic, type NewQuestion, type NewUserExamPreference } from '../db/schema';
export declare class ExamService {
    getAllExams(): Promise<{
        isActive: boolean | null;
        createdAt: Date;
        examId: string;
        examName: string;
        examCode: string;
        description: string | null;
        examPattern: string | null;
        totalMarks: number | null;
        durationMinutes: number | null;
        negativeMarking: boolean | null;
        negativeMarksRatio: string | null;
    }[]>;
    getExamById(examId: string): Promise<{
        isActive: boolean | null;
        createdAt: Date;
        examId: string;
        examName: string;
        examCode: string;
        description: string | null;
        examPattern: string | null;
        totalMarks: number | null;
        durationMinutes: number | null;
        negativeMarking: boolean | null;
        negativeMarksRatio: string | null;
    }>;
    createExam(examData: NewExam): Promise<{
        isActive: boolean | null;
        createdAt: Date;
        examId: string;
        examName: string;
        examCode: string;
        description: string | null;
        examPattern: string | null;
        totalMarks: number | null;
        durationMinutes: number | null;
        negativeMarking: boolean | null;
        negativeMarksRatio: string | null;
    }>;
    updateExam(examId: string, updateData: Partial<NewExam>): Promise<{
        isActive: boolean | null;
        createdAt: Date;
        examId: string;
        examName: string;
        examCode: string;
        description: string | null;
        examPattern: string | null;
        totalMarks: number | null;
        durationMinutes: number | null;
        negativeMarking: boolean | null;
        negativeMarksRatio: string | null;
    }>;
    deleteExam(examId: string): Promise<void>;
    getSubjectsByExam(examId: string): Promise<{
        createdAt: Date;
        examId: string;
        subjectId: string;
        subjectName: string;
        subjectCode: string;
        weightagePercentage: string | null;
        totalQuestions: number | null;
        displayOrder: number | null;
    }[]>;
    createSubject(subjectData: NewSubject): Promise<{
        createdAt: Date;
        examId: string;
        subjectId: string;
        subjectName: string;
        subjectCode: string;
        weightagePercentage: string | null;
        totalQuestions: number | null;
        displayOrder: number | null;
    }>;
    updateSubject(subjectId: string, updateData: Partial<NewSubject>): Promise<{
        createdAt: Date;
        examId: string;
        subjectId: string;
        subjectName: string;
        subjectCode: string;
        weightagePercentage: string | null;
        totalQuestions: number | null;
        displayOrder: number | null;
    }>;
    deleteSubject(subjectId: string): Promise<void>;
    getTopicsBySubject(subjectId: string): Promise<{
        createdAt: Date;
        subjectId: string;
        displayOrder: number | null;
        topicId: string;
        topicName: string;
        difficultyLevel: "easy" | "medium" | "hard" | null;
        estimatedTimeMinutes: number | null;
        parentTopicId: string | null;
    }[]>;
    createTopic(topicData: NewTopic): Promise<{
        createdAt: Date;
        subjectId: string;
        displayOrder: number | null;
        topicId: string;
        topicName: string;
        difficultyLevel: "easy" | "medium" | "hard" | null;
        estimatedTimeMinutes: number | null;
        parentTopicId: string | null;
    }>;
    updateTopic(topicId: string, updateData: Partial<NewTopic>): Promise<{
        createdAt: Date;
        subjectId: string;
        displayOrder: number | null;
        topicId: string;
        topicName: string;
        difficultyLevel: "easy" | "medium" | "hard" | null;
        estimatedTimeMinutes: number | null;
        parentTopicId: string | null;
    }>;
    deleteTopic(topicId: string): Promise<void>;
    getQuestionsByTopic(topicId: string, limit?: number, offset?: number): Promise<{
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        examId: string;
        subjectId: string;
        topicId: string;
        difficultyLevel: "easy" | "medium" | "hard" | null;
        questionId: string;
        questionText: string;
        questionImageUrl: string | null;
        questionType: "mcq" | "numerical" | "true_false" | "fill_blank" | null;
        marks: string | null;
        negativeMarks: string | null;
        optionA: string | null;
        optionB: string | null;
        optionC: string | null;
        optionD: string | null;
        optionE: string | null;
        correctAnswer: string;
        detailedSolution: string | null;
        solutionVideoUrl: string | null;
        hint: string | null;
        yearAppeared: number | null;
        source: string | null;
        timesAttempted: number | null;
        timesCorrect: number | null;
        averageTimeSeconds: number | null;
        language: string | null;
        createdBy: string | null;
    }[]>;
    getQuestionsBySubject(subjectId: string, limit?: number, offset?: number): Promise<{
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        examId: string;
        subjectId: string;
        topicId: string;
        difficultyLevel: "easy" | "medium" | "hard" | null;
        questionId: string;
        questionText: string;
        questionImageUrl: string | null;
        questionType: "mcq" | "numerical" | "true_false" | "fill_blank" | null;
        marks: string | null;
        negativeMarks: string | null;
        optionA: string | null;
        optionB: string | null;
        optionC: string | null;
        optionD: string | null;
        optionE: string | null;
        correctAnswer: string;
        detailedSolution: string | null;
        solutionVideoUrl: string | null;
        hint: string | null;
        yearAppeared: number | null;
        source: string | null;
        timesAttempted: number | null;
        timesCorrect: number | null;
        averageTimeSeconds: number | null;
        language: string | null;
        createdBy: string | null;
    }[]>;
    getQuestionsByExam(examId: string, limit?: number, offset?: number): Promise<{
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        examId: string;
        subjectId: string;
        topicId: string;
        difficultyLevel: "easy" | "medium" | "hard" | null;
        questionId: string;
        questionText: string;
        questionImageUrl: string | null;
        questionType: "mcq" | "numerical" | "true_false" | "fill_blank" | null;
        marks: string | null;
        negativeMarks: string | null;
        optionA: string | null;
        optionB: string | null;
        optionC: string | null;
        optionD: string | null;
        optionE: string | null;
        correctAnswer: string;
        detailedSolution: string | null;
        solutionVideoUrl: string | null;
        hint: string | null;
        yearAppeared: number | null;
        source: string | null;
        timesAttempted: number | null;
        timesCorrect: number | null;
        averageTimeSeconds: number | null;
        language: string | null;
        createdBy: string | null;
    }[]>;
    createQuestion(questionData: NewQuestion): Promise<{
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        examId: string;
        subjectId: string;
        topicId: string;
        difficultyLevel: "easy" | "medium" | "hard" | null;
        questionId: string;
        questionText: string;
        questionImageUrl: string | null;
        questionType: "mcq" | "numerical" | "true_false" | "fill_blank" | null;
        marks: string | null;
        negativeMarks: string | null;
        optionA: string | null;
        optionB: string | null;
        optionC: string | null;
        optionD: string | null;
        optionE: string | null;
        correctAnswer: string;
        detailedSolution: string | null;
        solutionVideoUrl: string | null;
        hint: string | null;
        yearAppeared: number | null;
        source: string | null;
        timesAttempted: number | null;
        timesCorrect: number | null;
        averageTimeSeconds: number | null;
        language: string | null;
        createdBy: string | null;
    }>;
    updateQuestion(questionId: string, updateData: Partial<NewQuestion>): Promise<{
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        examId: string;
        subjectId: string;
        topicId: string;
        difficultyLevel: "easy" | "medium" | "hard" | null;
        questionId: string;
        questionText: string;
        questionImageUrl: string | null;
        questionType: "mcq" | "numerical" | "true_false" | "fill_blank" | null;
        marks: string | null;
        negativeMarks: string | null;
        optionA: string | null;
        optionB: string | null;
        optionC: string | null;
        optionD: string | null;
        optionE: string | null;
        correctAnswer: string;
        detailedSolution: string | null;
        solutionVideoUrl: string | null;
        hint: string | null;
        yearAppeared: number | null;
        source: string | null;
        timesAttempted: number | null;
        timesCorrect: number | null;
        averageTimeSeconds: number | null;
        language: string | null;
        createdBy: string | null;
    }>;
    deleteQuestion(questionId: string): Promise<void>;
    getUserExamPreferences(userId: string): Promise<{
        preference: {
            userId: string;
            createdAt: Date;
            examId: string;
            preferenceId: string;
            targetExamDate: string | null;
            dailyStudyGoalMinutes: number | null;
            isPrimaryExam: boolean | null;
        };
        exam: {
            isActive: boolean | null;
            createdAt: Date;
            examId: string;
            examName: string;
            examCode: string;
            description: string | null;
            examPattern: string | null;
            totalMarks: number | null;
            durationMinutes: number | null;
            negativeMarking: boolean | null;
            negativeMarksRatio: string | null;
        };
    }[]>;
    setUserExamPreference(preferenceData: NewUserExamPreference): Promise<{
        userId: string;
        createdAt: Date;
        examId: string;
        preferenceId: string;
        targetExamDate: string | null;
        dailyStudyGoalMinutes: number | null;
        isPrimaryExam: boolean | null;
    }>;
    updateUserExamPreference(preferenceId: string, updateData: Partial<NewUserExamPreference>): Promise<{
        userId: string;
        createdAt: Date;
        examId: string;
        preferenceId: string;
        targetExamDate: string | null;
        dailyStudyGoalMinutes: number | null;
        isPrimaryExam: boolean | null;
    }>;
    removeUserExamPreference(preferenceId: string): Promise<void>;
    getExamWithStructure(examId: string): Promise<{
        subjects: {
            topics: {
                createdAt: Date;
                subjectId: string;
                displayOrder: number | null;
                topicId: string;
                topicName: string;
                difficultyLevel: "easy" | "medium" | "hard" | null;
                estimatedTimeMinutes: number | null;
                parentTopicId: string | null;
            }[];
            createdAt: Date;
            examId: string;
            subjectId: string;
            subjectName: string;
            subjectCode: string;
            weightagePercentage: string | null;
            totalQuestions: number | null;
            displayOrder: number | null;
        }[];
        isActive: boolean | null;
        createdAt: Date;
        examId: string;
        examName: string;
        examCode: string;
        description: string | null;
        examPattern: string | null;
        totalMarks: number | null;
        durationMinutes: number | null;
        negativeMarking: boolean | null;
        negativeMarksRatio: string | null;
    } | null>;
}
//# sourceMappingURL=exam.d.ts.map